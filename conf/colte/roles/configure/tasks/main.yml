---
#### CHECK/DEFINE WHAT COMPONENTS ARE INSTALLED
  - name: check for file existence
    stat: 
      path: "{{ item.path }}"
    register: files
    with_items:
    - {path: "/usr/local/etc/oai/hss.conf"}
    - {path: "/usr/local/etc/oai/mme.conf"}
    - {path: "/usr/local/etc/oai/spgw.conf"}
    - {path: "/usr/local/etc/colte/webgui.env"}
    - {path: "/usr/local/etc/colte/webadmin.env"}
    - {path: "/etc/bind/named.conf.options"}
    - {path: "/etc/haulage/config.yml"}    
    # - {path: "/etc/nginx/sites-available/webgui.conf"}
    # - {path: "/etc/nginx/sites-available/webconf.conf"}
    # - {path: "/etc/nginx/sites-available/rocketchat.conf"}
    # - {path: "/etc/nginx/sites-available/osm.conf"}  
    # - {path: "/etc/nginx/sites-available/osm.conf"}  
    # - {path: "/etc/nginx/sites-available/ums.conf"}
    # - {path: "/etc/nginx/sites-available/xowa.conf"}

  - name: set variables
    set_fact:

      hss_installed: files.results[0].stat.exists
      mme_installed: files.results[1].stat.exists
      spgw_installed: files.results[2].stat.exists

      webgui_installed: files.results[3].stat.exists
      webadmin_installed: files.results[4].stat.exists

      bind_installed: files.results[5].stat.exists
      haulage_installed: files.results[6].stat.exists

      # chat_installed: files.results[8].stat.exists
      # SMS TODO: re-enable OSM once we dockerize it
      # osm_installed: files.results[9].stat.exists
      # osm_installed: false
      # osm_site_installed: files.results[10].stat.exists
      # media_installed: files.results[11].stat.exists
      # wiki_installed: files.results[12].stat.exists



######################################
############# SYSTEM CONF ############
######################################

  - name: update mysql password/privileges
    mysql_user:
      name: "{{ mysql_user }}"
      password: "{{ mysql_password }}"
      host: localhost
      priv: "{{ mysql_db }}.*:ALL"
    become: yes

  - name: dynamically write tcpdump.service file
    lineinfile:
      dest: "/etc/systemd/system/colte-tcpdump.service"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    notify: reload systemd
    become: yes
    with_items:
    - {field: 'ExecStart', line: "ExecStart=/bin/bash -c \"/usr/sbin/tcpdump -i {{ enb_iface }} -w /var/log/colte/tcpdump/sctp_$(/bin/date +\"%%Y-%%m-%%d-%%H%%MZ\").pcap\""}

  - name: enable epc
    systemd:
      name: colte-epc
      state: started
      enabled: yes
    become: yes
    when: enable_epc

  - name: disable epc
    systemd:
      name: colte-epc
      state: stopped
      enabled: no
    become: yes
    when: not enable_epc

  - name: enable haulage
    systemd:
      name: haulage
      state: started
      enabled: yes
    become: yes
    when: enable_haulage

  - name: disable haulage
    systemd:
      name: haulage
      state: stopped
      enabled: no
    become: yes
    when: not enable_haulage

  - name: enable webgui
    systemd:
      name: colte-webgui
      state: started
      enabled: yes
    become: yes
    when: enable_webgui

  - name: disable webgui
    systemd:
      name: colte-webgui
      state: stopped
      enabled: no
    become: yes
    when: not enable_webgui





######################################
############# EPC CONF ###############
######################################

  - name: write information to hss.conf
    lineinfile:
      dest: "/usr/local/etc/oai/hss.conf"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
      # owner: "{{ ansible_user_id }}"
      # group: "{{ ansible_user_id }}"
      # mode: 0644
    when: hss_installed
    with_items:
    - {field: 'MYSQL_user', line: 'MYSQL_user   = "{{ mysql_user }}";'}
    - {field: 'MYSQL_pass', line: 'MYSQL_pass   = "{{ mysql_password }}";'}
    - {field: 'MYSQL_db', line: 'MYSQL_db     = "{{ mysql_db }}";'}
    become: yes

  - name: write information to mme.conf
    lineinfile:
      dest: "/usr/local/etc/oai/mme.conf"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    when: mme_installed
    with_items:
    - {field: "MME_INTERFACE_NAME_FOR_S1_MME", line: "        MME_INTERFACE_NAME_FOR_S1_MME         = \"{{ enb_iface }}\";"}
    - {field: "MME_IPV4_ADDRESS_FOR_S1_MME", line: "        MME_IPV4_ADDRESS_FOR_S1_MME         = \"{{ enb_iface_addr }}\";"}
    - {field: "MME_CODE", line: "         {MCC=\"{{ mcc }}\" ; MNC=\"{{ mnc }}\"; MME_GID=\"1\" ; MME_CODE=\"1\"; }"}
    - {field: "TAC =", line: "         {MCC=\"{{ mcc }}\" ; MNC=\"{{ mnc }}\";  TAC = \"1\"; }"}
    - {field: "SGW_IPV4_ADDRESS_FOR_S11", line: "         {ID=\"tac-lb01.tac-hb00.tac.epc.mnc0{{ mnc }}.mcc{{ mcc }}.3gppnetwork.org\" ; SGW_IPV4_ADDRESS_FOR_S11=\"127.0.0.30/8\";}"}
    - {field: "MAXENB", line: "    MAXENB = {{ max_enb }};"}
    - {field: "MAXUE", line: "    MAXUE = {{ max_ue }};"}
    become: yes

  - name: write information to spgw.conf
    lineinfile:
      dest: "/usr/local/etc/oai/spgw.conf"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    when: spgw_installed
    with_items:
    - {field: "APN_AMBR_UL", line: "      APN_AMBR_UL                             = {{ max_ul }};"}
    - {field: "APN_AMBR_DL", line: "      APN_AMBR_DL                             = {{ max_dl }};"}
    - {field: "SGW_INTERFACE_NAME_FOR_S1U_S12_S4_UP", line: "        SGW_INTERFACE_NAME_FOR_S1U_S12_S4_UP         = \"{{ enb_iface }}\";"}
    - {field: "SGW_IPV4_ADDRESS_FOR_S1U_S12_S4_UP", line: "        SGW_IPV4_ADDRESS_FOR_S1U_S12_S4_UP         = \"{{ enb_iface_addr }}\";"}
    - {field: "PGW_INTERFACE_NAME_FOR_SGI", line: "        PGW_INTERFACE_NAME_FOR_SGI            = \"{{ wan_iface }}\";"}
    - {field: "IPV4_LIST", line: "        IPV4_LIST = (\"{{ lte_subnet }}\");"}
    - {field: 'MYSQL_user', line: '    MYSQL_user   = "{{ mysql_user }}";'}
    - {field: 'MYSQL_pass', line: '    MYSQL_pass   = "{{ mysql_password }}";'}
    - {field: 'MYSQL_db', line: '    MYSQL_db   = "{{ mysql_db }}";'}
    become: yes

  - name: update spgw_nat script with wan_iface
    lineinfile:
      dest: "/usr/bin/spgw_nat.sh"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    when: spgw_installed
    with_items:
    - {field: "-C POSTROUTING -o", line: "iptables -t nat -C POSTROUTING -o {{ wan_iface }} -j MASQUERADE"}
    - {field: "-A POSTROUTING -o", line: "     iptables -t nat -A POSTROUTING -o {{ wan_iface }} -j MASQUERADE"}
    - {field: "-C FORWARD -i gtp0 -o", line: "iptables -C FORWARD -i gtp0 -o {{ wan_iface }} -j ACCEPT"}
    - {field: "-A FORWARD -i gtp0 -o", line: "     iptables -A FORWARD -i gtp0 -o {{ wan_iface }} -j ACCEPT"}
    - {field: "-C FORWARD -i .* -o gtp0", line: "iptables -C FORWARD -i {{ wan_iface }} -o gtp0 -m state --state RELATED,ESTABLISHED -j ACCEPT"}
    - {field: "-A FORWARD -i .* -o gtp0", line: "     iptables -A FORWARD -i {{ wan_iface }} -o gtp0 -m state --state RELATED,ESTABLISHED -j ACCEPT"}
    become: yes





######################################
############# WEBGUI CONF ############
######################################

  - name: write environment information to webgui.env
    lineinfile:
      dest: "/usr/local/etc/colte/webgui.env"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    become: yes
    when: webgui_installed
    with_items:
    - {field: 'DB_USER', line: 'DB_USER={{ mysql_user }}'}
    - {field: 'DB_PASSWORD', line: 'DB_PASSWORD={{ mysql_password }}'}
    - {field: 'DB_NAME', line: 'DB_NAME={{ mysql_db }}'}
    - {field: 'LOCALE', line: 'LOCALE={{ webgui_language }}'}





######################################
############# WEBADMIN CONF ##########
######################################

  - name: write environment information to webadmin.env
    lineinfile:
      dest: "/usr/local/etc/colte/webadmin.env"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    become: yes
    when: webadmin_installed
    with_items:
    - {field: 'DB_USER', line: 'DB_USER={{ mysql_user }}'}
    - {field: 'DB_PASSWORD', line: 'DB_PASSWORD={{ mysql_password }}'}
    - {field: 'DB_NAME', line: 'DB_NAME={{ mysql_db }}'}
    - {field: 'LOCALE', line: 'LOCALE={{ webadmin_language }}'}





######################################
######## LOCAL DNS CONF ##############
######################################

# FIRST: install + config bind9 if not already installed
  - name: install bind9
    apt:
      name: bind9
    when: not bind_installed and local_dns
    become: yes

# SMS TODO: make a sane named.conf.options here
# SMS TODO: make a sane named.conf.local here?!?
# SMS TODO: copy a default file to /etc/bind/zones/colte_db !!!

  - name: write non-local DNS information to spgw.conf
    lineinfile:
      dest: "/usr/local/etc/oai/spgw.conf"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    when: not local_dns
    with_items:
    - {field: 'DEFAULT_DNS_IPV4_ADDRESS', line: "    DEFAULT_DNS_IPV4_ADDRESS = \"{{ dns }}\";"}
    - {field: 'DEFAULT_DNS_SEC_IPV4_ADDRESS', line: "    DEFAULT_DNS_SEC_IPV4_ADDRESS = \"{{ dnssec }}\";"}
    become: yes

  - name: write local DNS information to spgw.conf
    lineinfile:
      dest: "/usr/local/etc/oai/spgw.conf"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    when: local_dns
    with_items:
    - {field: 'DEFAULT_DNS_IPV4_ADDRESS', line: "    DEFAULT_DNS_IPV4_ADDRESS = \"{{ epc_snet_addr }}\";"}
    - {field: 'DEFAULT_DNS_SEC_IPV4_ADDRESS', line: "    DEFAULT_DNS_SEC_IPV4_ADDRESS = \"{{ epc_snet_addr }}\";"}
    become: yes

# EVERYTHING BEYOND HERE: ASSUME CONFIG IS ALREADY SANE
  - name: write information to named.conf.options
    lineinfile:
      dest: "/etc/bind/named.conf.options"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    when: local_dns
    become: yes
    notify: reload bind9
    with_items:
    - {field: "#SUBNET", line: "  {{ lte_subnet }}; #SUBNET"}

  - name: write network name to named.conf.local
    lineinfile:
      dest: "/etc/bind/named.conf.local"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    when: local_dns
    become: yes
    notify: reload bind9
    with_items:
    - {field: "zone ", line: "zone \"{{ network_name }}\" {"}

  - name: write network name to zonefile
    lineinfile:
      dest: "/etc/bind/zones/colte_db"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    when: local_dns
    become: yes
    notify: reload bind9
    with_items:
    - {field: "admin", line: "@ IN  SOA colte.{{ network_name }}. admin.{{ network_name }}. ("}
    - {field: "N1", line: " IN  NS  colte.{{ network_name }}. ;N1"}
    - {field: "A1", line: "*.{{ network_name }}.  IN  A {{ epc_snet_addr }} ;A1"}





### SMS TODO: BREAK THIS OUT INTO A SEPARATE CONFIG FILE?!?!?!?
######################################
############ HAULAGE CONF ############
######################################

  - name: write information to haulage config.yml
    lineinfile:
      dest: "/etc/haulage/config.yml"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    when: haulage_installed
    with_items:
    - {field: "dbLocation", line: "  dbLocation: \"{{ mysql_db }}\""}
    - {field: "dbUser", line: "  dbUser: \"{{ mysql_user }}\""}
    - {field: "dbPass", line: "  dbPass: \"{{ mysql_password }}\""}
    - {field: "interface", line: "interface: \"gtp0\""}
    become: yes
